React.js
*style guide: 

https://github.com/airbnb/javascript/tree/master/react

Launch React:

1) Hyper Terminal
2) cd into /Users/dangalansky/my-app
3) npm start


React applications all contained in the following:
<div id="root"></div>

comes just before: 
<script src="../src/index.js" type="text/javascript"></script>

JSX- JavaScript Syntax Extension, React extension
	—> provides a way to structure component rendering using syntax similar in appearance to HTML

1) required dependencies:

	- react
	- react-dom 

2) at top of index.js

	import React from “react”;
	import ReactDOM from “react-dom”;

3) render page by tapping into ReactDOM

	ReactDOM.render( What to show, Where to Show it, optional: callback to tell us when render function has completed);

	ex) ReactDOM.render(<h1>Hello World!</h1>, document.getElementById(“root”));

4) for multiple elements, place inside <div>

	ex) ReactDOM.render(
			<div>
				<h1> Hello World </h1>
				<p> A paragraph! </p>
			</div>,
			document.getElementById(“root”)
		);

Inserting Variables

	ex) const name = “Dan”

	<h1> Hello {name} </h1> —> Renders to “Hello Dan”

	ex) injecting JS expressions into the brackets

	<h1> Your lucky number is {Math.floor(Math.random() * 10)} </h1> —> Renders to “Your lucky number is 2” 
			* randomizes 0 - 10 every reload

Expressions vs. Statements

	* expression - piece of code that results in a value

		ex) const y = 5;

		ex) const y = getAnswer();

	* statement - instruction or action

		ex) if/else statement

		ex) while loop 

CSS and Styling within JSX

1) we must update our script code to: type=“text/JSX”

2) apply all styling through classes, created in styles.css

	ex) .heading {
			color: red;
		}

3) HTML attributes must be camel-cased bc it’s JSX
		
	ex) <h1 className=“heading” contentEditable=“false”> Hello World </h1>

4) We can still target JSX elements through CSS

	ex) ul {
			color: blue;
		}

Inline Styles

1) inline styles must be formatted in JSON within curly brackets (so, 2 sets!)
	
	ex) <h1 style={{ color: “red” }}> Hello World! </h1>

2) camel-cased keys, values as strings and commas instead of semi colons

	ex) const customStyle = {
			color: “red”,
			fontSize: “20px”
		}

		<h1 style={customStyle}>Hello World!</h1>

3) useful when a certain condition is met and something must change on the fly

	ex) customStyle.color = “blue”;

4) you can set empty variables

	ex) let greeting;
		
		const customStyle = {
			color: “”
		}

		if (condition) {
			greeting = “New Statement”;	
			customStyle.color = “red”;
		}

Components

* allows for less scrolling, less code, easier to understand :)

1) React Convention: Components are named in Pascal Case
	- first letter of every word capitalized

2) Components are created as functions

	ex) function Heading() {
			return <h1> My Favorite Foods </h1>
		}

3) Components are placed as HTML elements

	ex) <Heading></Heading>

	 But, if we have an element without children, self-closing tag

	ex) <Heading />

4) Component should reside as separate .jsx files inside the component folder

	ex) Heading.jsx

5) Each .jsx file must import react and export component

	ex) import React from “react”;

		function Heading() {
			return <h1>My Favorite Foods</h1>;
		}

		export default Heading;

6) index.js must import component, from filepath

	ex) import Heading from “./components/Heading”;

7) common practice is to build component tree inside App.jsx

	ex) inside index.js

		import React from “react”;
		import ReactDOM from “react-dom”;
		import App from “./components/App”;

		ReactDOM.render(<App/ >, document.getElementById(“root”));

	this would be all thats there!
