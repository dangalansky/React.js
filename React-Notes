React.js
*style guide: 

https://github.com/airbnb/javascript/tree/master/react

Launch React:

1) Hyper Terminal
2) cd into /Users/dangalansky/my-app
3) npm start


React applications all contained in the following:
<div id="root"></div>

comes just before: 
<script src="../src/index.js" type="text/javascript"></script>

JSX- JavaScript Syntax Extension, React extension
	—> provides a way to structure component rendering using syntax similar in appearance to HTML

1) required dependencies:

	- react
	- react-dom 

2) at top of index.js

	import React from “react”;
	import ReactDOM from “react-dom”;

3) render page by tapping into ReactDOM

	ReactDOM.render( What to show, Where to Show it, optional: callback to tell us when render function has completed);

	ex) ReactDOM.render(<h1>Hello World!</h1>, document.getElementById(“root”));

4) for multiple elements, place inside <div>

	ex) ReactDOM.render(
			<div>
				<h1> Hello World </h1>
				<p> A paragraph! </p>
			</div>,
			document.getElementById(“root”)
		);

Inserting Variables

	ex) const name = “Dan”

	<h1> Hello {name} </h1> —> Renders to “Hello Dan”

	ex) injecting JS expressions into the brackets

	<h1> Your lucky number is {Math.floor(Math.random() * 10)} </h1> —> Renders to “Your lucky number is 2” 
			* randomizes 0 - 10 every reload

Expressions vs. Statements

	* expression - piece of code that results in a value

		ex) const y = 5;

		ex) const y = getAnswer();

	* statement - instruction or action

		ex) if/else statement

		ex) while loop 

CSS and Styling within JSX

1) we must update our script code to: type=“text/JSX”

2) apply all styling through classes, created in styles.css

	ex) .heading {
			color: red;
		}

3) HTML attributes must be camel-cased bc it’s JSX
		
	ex) <h1 className=“heading” contentEditable=“false”> Hello World </h1>

4) We can still target JSX elements through CSS

	ex) ul {
			color: blue;
		}

Inline Styles

1) inline styles must be formatted in JSON within curly brackets (so, 2 sets!)
	
	ex) <h1 style={{ color: “red” }}> Hello World! </h1>

2) camel-cased keys, values as strings and commas instead of semi colons

	ex) const customStyle = {
			color: “red”,
			fontSize: “20px”
		}

		<h1 style={customStyle}>Hello World!</h1>

3) useful when a certain condition is met and something must change on the fly

	ex) customStyle.color = “blue”;

4) you can set empty variables

	ex) let greeting;
		
		const customStyle = {
			color: “”
		}

		if (condition) {
			greeting = “New Statement”;	
			customStyle.color = “red”;
		}

Components

* allows for less scrolling, less code, easier to understand :)

1) React Convention: Components are named in Pascal Case
	- first letter of every word capitalized

2) Components are created as functions

	ex) function Heading() {
			return <h1> My Favorite Foods </h1>
		}

3) Components are placed as HTML elements

	ex) <Heading></Heading>

	 But, if we have an element without children, self-closing tag

	ex) <Heading />

4) Component should reside as separate .jsx files inside the component directory (placed inside src directory)

	ex) Heading.jsx

5) Each .jsx file must import react and export component

	ex) import React from “react”;

		function Heading() {
			return <h1>My Favorite Foods</h1>;
		}

		export default Heading;

6) index.js must import component, from filepath

	ex) import Heading from “./components/Heading”;

7) common practice is to build component tree inside App.jsx

	ex) inside index.js

		import React from “react”;
		import ReactDOM from “react-dom”;
		import App from “./components/App”;

		ReactDOM.render(<App/ >, document.getElementById(“root”));

	this would be all thats there!

Exporting Modules

1) keyword default means that will be imported regardless of what you call the file

	ex) export default Heading;

		—> import Bullshoot from “./components/Heading”
		—> all the same, call it whatever you want

2) if you want to export multiple items from module

		—> place items inside {} after default
		
		ex) export default pi;
			export { doublePi, triplePi };

3) if you are importing multiple items from module

		—> place item(s) inside {} for import statement

		ex) import pi, { doublePi, triplePi } from “./components/Math”

		—> must use () to activate the item later

		ex) <h1>{doublePi()}</h1>

		-> OR: wildcard import

		ex) import * as pi from “./components/Math”

			{pi.default} or {pi.doublePi()} etc…

Props

*properties; attributes of React elements 

1) unlike HTML, React allows for custom-defined properties

2) create a component and define props

	ex) function Card(props) {
			return(
				<div>
					<h2>{props.name}</h2>
					<img src={props.img} />
					<p>{props.tel}</p>
				</div>
			);
		}

3) When you use a component, simply use props to personalize

	ex) <Card name=“Beyonce” img=“https://image.com” tel=“303.718.6666” />

4) To pull a single element out of a props-based component, to be its own component

	ex) <p className=“info”>{props.tel}</p> becomes Details()

		come up with new attribute name (detailInfo)

		function Details (props) {
			return <img src={props.detailInfo} />;
		}

	-> then you place Avatar as component like so:
		
		<Detail detailInfo={props.tel} />


React DevTools

* find names of properties and which components rendered them


1) go to inspect > components

2) select components to see prop names and related data

3) look at full source code

	—> select component > select “<>” on right 

Mapping Components

*.map() —> creates a new array by looping through (JSON) array and doing something to each item; expects a function

—> disperses data through a loop into a function that renders HTML elements

* requires children to each have a unique key prop

ex) contacts.js is a JSON array

	1) create function that takes data from array
		
		function createCard(contact) {
			return(
				 <Card 
					key={contact.id}
					name={contact.name}
					img={contact.imgURL}
				/>
			);
		}

	2) inside curly brakets pass rendering function into .map() function
	
		{contacts.map(createCard)}

Filter
*.filter() -> creates a new array by looping through an array, returns items that return true; expects a function

ex) example with anonymous function
	
	—> numbers = [3, 56, 2, 48, 5]

	var newNumbers = numbers.filter( function(num)  {
		return num < 10;
	});

	newNumbers = [58, 48]

Reduce
*.reduce() -> accumulates a value by doing something to each item in an array; expects a function

	—> inner function requires accumulator (basically 0 in most cases) and currentNumber

ex) example with anonymous function

	—> numbers = [3, 56, 2, 48, 5]

	var newNumber = numbers.reduce( function (accumulator, currentNumber) {
		return accumulator + currentNumber;
	});

	newNumber = 114
	
Find
*.find() -> finds first item that matches from an array; expects a function

ex) example with anonymous function
	
	—> numbers = [3, 56, 2, 48, 5]

	var newNumber = numbers.find( function(num) {
		return num > 10;
	});

	newNumber = 56

Find Index
*.findIndex() -> finds index of item that matches from an array; expects a function

ex) example with anonymous function

	—> numbers = [3, 56, 2, 48, 5]

	var numIndex = numbers.findIndex( function(num) {
		return num > 10;
	});

	numIndex = 1
	

Arrow Function (The Fat Arrow)
* great for massive space saving; horrible for jr. devs or others who are new to JS

1) allows us to remove keyword “function” from anonymous functions

	ex) numbers.map( function(x, y) {
			return x*y;
		});

		instead

		numbers.map( (x,y) => {
			return x*y;
		}):

2) for single variable expressions, can remove parentheses 

	ex) numbers.map( x => {
			return x * x;
		}):

3) for single-line return statements, can remove both “return” keyword and curly brackets

	ex) numbers.map( x => x * x );


Conditional Rendering

*ternary operator -> to use instead of statement; bc expressions only as variables!!

	—> CONDITION ? DO IF TRUE: DO IF FALSE 

	turns statement into 3 expressions

	ex) return <div> {
			isLoggedIn ? <h1>Welcome</h1> : <Login />
		}</div>

	ex) using ternary operator w/ null (do nothing)

			isLoggedIn ? <h1>Welcome</h1> : null
	

but… we can shorten with use of && bc JS only proceeds if first condition is true

	ex) return <div> {
			isLoggedIn && <h1>Welcome</h1>
		}</div>

—> using props to affect a condition outside of a component

	ex) function Form(props) {
			return(
			<form>
				{!props.isRegistered && <input type=“password” placeholder=“Confirm Password” />}

				<button type=“submit”>{props.isRegistered ? “Login” : “Register”}</button>
			</form>
			);
		}

		—> inside App.jsx
		
		isRegistered = true

		<Form isRegistered={isRegistered} />

	
State

UI = f(State)
	
	—> the look of a user interface is dependent upon the state of the elements contained within  


* declarative programing —> UI changes based on a state
 
		ex) var isDone = true;
			
			const strikeThrough = {textDecoration: “line-through”};

			<p style={isDone && strikeThrough}>Buy Milk</p>;


* imperative programing —> direct action based on code that taps into properties for specific change

		ex) document.getElemenetById(“root”).style.textDecoration = “line-through”;

Hooks
* allows for dynamic rendering based on changing states

*React.useState()
	- add to import statement: import React, {useState} form “react”;
	- must be used inside functional component
	- returns an array [undefined, function()]

	ex) const state = useState(123);

		—> state[0] = 123
		—> state[1] = function()

* destructuring - process of destructuring complex structures (i.e. objects and arrays)	

	ex) const rgb = [255, 162, 42] —> const [red, green, blue] = [255, 162, 42] —> red = 255

thus… destructure .useState() to make more sense and create a function

	ex) const [count, setCount] = useState(123);

		function increase() {
			setCount(count + 1);
		}

		<button onClick={increase}>+</button>

Destructuring

- for arrays:

	ex) const animals = [
  			{ name: "cat", sound: "meow" },
  			{ name: "dog", sound: "woof" }
		];

		const [cat, dog] = animals; 

- for objects

	ex) const {name, sound} = cat; 

			or rename values

	ex) const {name: catName, sound: catSound} = cat;

- to provide default object value

	ex) const {name = “Fluffy”, sound = “Purr”} = cat;
		
		* in the case that no value exists, these will fill that need

- for nested objects 

	ex) const animals = [
  			{ name: "cat", 
			  sound: "meow" 
			  feedingRequirements: {
		       	food: 2,
			    water: 3
			   }
            },
  			{ name: "dog", sound: "woof" },
			
		];

		const {name, sound, feedingRequirements: {food, water} } = cat;



	ex) Array of objects + nested shtuff
	
	const cars = [
  		{
    		model: "Honda Civic",
    		coloursByPopularity: ["black", "silver"],
    		speedStats: {
      			topSpeed: 140,
      			zeroToSixty: 8.5
    		}
  		},
  		{
    		model: "Tesla Model 3",
    		coloursByPopularity: ["red", "white"],
    		speedStats: {
      			topSpeed: 150,
      			zeroToSixty: 3.2
    		}
  		}
		];

—> for arrays

	ex) const [honda, tesla] = cars;

	ex) const { colorsByPopularity: [hondaTopColor] } = honda;

					  ^ in this case, single value assumes index [0]

—> for objects

	ex) const { speedStats: {topSpeed: hondaTopSpeed} } = honda;
